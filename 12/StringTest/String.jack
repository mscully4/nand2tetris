// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array container;
    field int max, actualLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength > 0) {
            let container = Array.new(maxLength);
        } else {
            let container = Array.new(1);
        }
        let max = maxLength;
        let actualLength = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return actualLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < max) {
            return container[j];
        } else {
            return -1;
        } 
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j < max) {
            let container[j] = c;
        }
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (actualLength < max - 1) {
            let container[actualLength] = c;
            let actualLength = actualLength + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (actualLength < max) {
            let container[actualLength - 1] = 0;
            let actualLength = actualLength - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int sum, j, sign;
        let sum = 0;
        let j = 0;
        let sign = 1;
        
        if (container[j] = 45) {
            let sign = -1;
            let j = 1;
        }
        while (j < actualLength) {
            let sum = (sum * 10) + (container[j] - 48);
            let j = j + 1;
        }
        return sum * sign;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int r, value, j;
        let actualLength = 0;
        let value = Math.abs(val);
        let j = 0;

        if (val < 0) {
            let container[0] = 45;
            let actualLength = 1;
            let j = 1;
        }
  
        while (value > 0) {
            let r = value - ((value / 10) * 10);
            if (val > 0) {
                let container[max - j - 2] = r + 48;
            } else {
                let container[max - j] = r + 48;
            }
            let actualLength = actualLength + 1;
            let value = value / 10;
            let j = j + 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
